version: '3.8'

services:
  # Rust Stock Analyzer
  stock-analyzer:
    build:
      context: ./rust-stock-analyzer
      dockerfile: Dockerfile
    container_name: stock-analyzer
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=info
      - HOST=0.0.0.0
      - PORT=8080
      - DATABASE_URL=postgres://stockuser:stockpass@postgres:5432/stock_analyzer
      - DATABASE_MAX_CONNECTIONS=10
      - DATABASE_ENABLE_MIGRATIONS=true
      - AKSERVICE_URL=http://akshare-service:5000
      - AKSERVICE_TIMEOUT=30
      - MAX_WORKERS=10
      - TIMEOUT_SECONDS=30
      - TECHNICAL_WEIGHT=0.5
      - FUNDAMENTAL_WEIGHT=0.3
      - SENTIMENT_WEIGHT=0.2
      - TECHNICAL_PERIOD=60
      - SENTIMENT_PERIOD=30
      - AI_ENABLED=true
      - AI_TIMEOUT=60
      - AUTH_ENABLED=false
    volumes:
      - stock_analyzer_data:/app/data
    depends_on:
      - postgres
      - akshare-service
    restart: unless-stopped
    networks:
      - stock-network

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: stock-postgres
    environment:
      - POSTGRES_DB=stock_analyzer
      - POSTGRES_USER=stockuser
      - POSTGRES_PASSWORD=stockpass
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - stock-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U stockuser -d stock_analyzer"]
      interval: 10s
      timeout: 5s
      retries: 5

  # AKShare Python Service
  akshare-service:
    build:
      context: .
      dockerfile: akshare-service.Dockerfile
    container_name: akshare-service
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=0
      - AKSHARE_CACHE_ENABLED=true
      - AKSHARE_CACHE_TTL=300
    volumes:
      - akshare_cache:/app/cache
    restart: unless-stopped
    networks:
      - stock-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching (optional)
  redis:
    image: redis:7-alpine
    container_name: stock-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    restart: unless-stopped
    networks:
      - stock-network
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Nginx reverse proxy (optional)
  nginx:
    image: nginx:alpine
    container_name: stock-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - stock-analyzer
    restart: unless-stopped
    networks:
      - stock-network
    profiles:
      - proxy

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  akshare_cache:
    driver: local
  stock_analyzer_data:
    driver: local

networks:
  stock-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16